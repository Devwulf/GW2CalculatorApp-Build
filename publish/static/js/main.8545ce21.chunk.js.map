{"version":3,"sources":["logo.svg","components/Price.tsx","utils/ItemField.ts","utils/ItemRarity.ts","utils/ItemType.ts","components/ItemComparisonSlot.tsx","dataContracts/ItemQuery.ts","services/DummyApiService.ts","components/SortingBar.tsx","pages/MyList.tsx","pages/Dashboard.tsx","components/ItemSummarySlot.tsx","pages/GeneralSearch.tsx","environment.ts","open-id-config.ts","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Price","props","state","this","price","priceColor","isNegative","absPrice","Math","abs","gold","floor","silver","copper","className","id","icon","style","fontSize","src","alt","React","Component","defaultProps","ItemField","ItemFieldSort","ItemRarity","ItemType","ItemComparisonSlot","amount","item","revenue","round","SellPrice","expenditure","BuyPrice","totalFees","Fee","netProfit","Icon","Name","htmlFor","type","defaultValue","onChange","event","value","parseInt","target","console","log","isNaN","setState","AppealValue","Margin","TransactionRate","ItemQuery","options","name","rarity","minLevel","maxLevel","minBuyPrice","maxBuyPrice","minSellPrice","maxSellPrice","sortBy","sortDirection","All","Appeal","Descending","valueOf","toString","DummyApiService","query","randomBuy","random","randomSell","randomTransactRate","margin","randomIndex","Id","ceil","parseFloat","formatter","format","Error","pageNumber","items","lowestMargin","Number","POSITIVE_INFINITY","highestMargin","lowestRate","highestRate","i","GetItem","push","forEach","rate","sort","a","b","compareFunc","ids","Ascending","TradeRate","Buys","Sells","localeCompare","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","SortingBar","searchStr","onSearch","bind","onSort","onSortDirection","getItems","preventDefault","newDirection","optionValues","GetItems","children","isSortAscending","onSubmit","onClick","padding","MyList","height","sortedItems","noScrollX","map","index","key","Dashboard","ItemSummarySlot","GeneralSearch","environment","urls","authority","host","gw2calculator","configuration","client_id","response_type","scope","automaticSilentRenew","loadUserInfo","redirect_uri","post_logout_redirect_uri","silent_redirect_uri","Header","boxShadow","zIndex","Consumer","to","oidcUser","profile","logout","login","library","add","fas","App","callbackComponentOverride","logo","authenticating","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8545ce21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\n\r\nexport type PriceProps = {\r\n    price: number;\r\n    priceColor: string;\r\n}\r\n\r\nexport type PriceState = {\r\n\r\n}\r\n\r\nexport default class Price extends React.Component<PriceProps, PriceState> {\r\n\r\n    static defaultProps: PriceProps = {\r\n        price: 0,\r\n        priceColor: \"text-gray-200\"\r\n    }\r\n\r\n    constructor(props: PriceProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { price, priceColor } = this.props;\r\n        const isNegative = price < 0;\r\n        const absPrice = Math.abs(price);\r\n\r\n        const gold = Math.floor(absPrice / 10000);\r\n        const silver = Math.floor(absPrice % 10000 / 100);\r\n        const copper = Math.floor(absPrice % 10000 % 100);\r\n\r\n        return (\r\n            <div className=\"flex flex-row\">\r\n                <div id=\"gold\" className=\"mr-1 flex flex-row items-center\">\r\n                    <FontAwesomeIcon icon=\"minus\" className={`${isNegative ? \"\" : \"hidden\"} ${priceColor} mr-1`} style={{fontSize: \"0.5rem\"}} />\r\n                    <img src=\"https://wiki.guildwars2.com/images/d/d1/Gold_coin.png\" alt=\"Gold Coin\" className=\"mr-1 w-4 h-4\"/>\r\n                    <span className={`text-sm ${priceColor}`}>{gold}</span>\r\n                </div>\r\n                <div id=\"silver\" className=\"mr-1 flex flex-row items-center\">\r\n                    <img src=\"https://wiki.guildwars2.com/images/3/3c/Silver_coin.png\" alt=\"Silver Coin\" className=\"mr-1 w-4 h-4\"/>\r\n                    <span className={`text-sm ${priceColor}`}>{silver}</span>\r\n                </div>\r\n                <div id=\"copper\" className=\"mr-1 flex flex-row items-center\">\r\n                    <img src=\"https://wiki.guildwars2.com/images/e/eb/Copper_coin.png\" alt=\"Copper Coin\" className=\"mr-1 w-4 h-4\"/>\r\n                    <span className={`text-sm ${priceColor}`}>{copper}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","export enum ItemField {\r\n    Name,\r\n    Buys,\r\n    Sells,\r\n    Appeal,\r\n    Margin,\r\n    TradeRate\r\n}\r\n\r\nexport enum ItemFieldSort {\r\n    Ascending,\r\n    Descending  \r\n}","export enum ItemRarity {\r\n    None = 0,\r\n    Junk = 1,\r\n    Basic = 2,\r\n    Fine = 4,\r\n    Masterwork = 8,\r\n    Rare = 16,\r\n    Exotic = 32,\r\n    Ascended = 64,\r\n    Legendary = 128,\r\n    All = 255\r\n}","export enum ItemType {\r\n    None = 0,\r\n    Armor = 1,\r\n    Back = 2,\r\n    Bag = 4,\r\n    Consumable = 8,\r\n    Container = 16,\r\n    CraftingMaterial = 32,\r\n    Gathering = 64,\r\n    Gizmo = 128,\r\n    Key = 256,\r\n    MiniPet = 512,\r\n    Tool = 1024,\r\n    Trait = 2048,\r\n    Trinket = 4096,\r\n    Trophy = 8192,\r\n    UpgradeComponent = 16384,\r\n    Weapon = 32768,\r\n    All = 65535\r\n}","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { PricedItem } from \"../dataContracts/PricedItem\";\r\nimport Price from \"./Price\";\r\n\r\nexport type ItemComparisonSlotProps = {\r\n    item: PricedItem;\r\n}\r\n\r\nexport type ItemComparisonSlotState = {\r\n    amount: number;\r\n}\r\n\r\nexport default class ItemComparisonSlot extends React.Component<ItemComparisonSlotProps, ItemComparisonSlotState> {\r\n    constructor(props: ItemComparisonSlotProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            amount: 1\r\n        };\r\n\r\n        //this.getNetProfit = this.getNetProfit.bind(this);\r\n    }\r\n\r\n    /*\r\n    getNetProfit(): number {\r\n        const { item, amount } = this.state;\r\n\r\n        if (item == null)\r\n            return 0;\r\n\r\n        const revenue = Math.round(item.SellPrice * amount);\r\n        const expenditure = Math.round(item.BuyPrice * amount);\r\n        const totalFees = item.Fee * amount;\r\n        return revenue - expenditure - totalFees;\r\n    }\r\n    */\r\n    \r\n    render() {\r\n        const { item } = this.props;\r\n        const { amount } = this.state;\r\n\r\n        const revenue = Math.round(item.SellPrice * amount);\r\n        const expenditure = Math.round(item.BuyPrice * amount);\r\n        const totalFees = item.Fee * amount;\r\n        const netProfit = revenue - expenditure - totalFees;\r\n\r\n        // TODO: Amount is not sorting with items\r\n\r\n        return (\r\n            <div className=\"flex flex-row px-4 py-2 bg-gray-700\">\r\n                <div className=\"flex flex-row w-2/8 items-center mr-6\">\r\n                    <img src={item.Icon} alt={item.Name} className=\"mr-4 w-12 h-12\"/>\r\n                    <span className=\"italic text-gray-200\">{item.Name}</span>\r\n                </div>\r\n                <div className=\"flex flex-col xl:flex-row w-4/8 items-center\">\r\n                    <div className=\"flex flex-row xl:mr-4\">\r\n                        <div className=\"flex flex-col items-center mr-4\">\r\n                            <label htmlFor=\"\" className=\"text-sm mb-1 text-gray-500\">Amount</label>\r\n                            <input type=\"number\" className=\"w-16 px-1 text-sm bg-gray-600 text-gray-200\"\r\n                                defaultValue={1}\r\n                                onChange={event => {\r\n                                    const value: number = parseInt(event.target.value);\r\n                                    console.log(value);\r\n                                    if (value != null && !isNaN(value))\r\n                                        this.setState({amount: value});\r\n                                }} />\r\n                        </div>\r\n                        <div className=\"flex flex-col items-center\">\r\n                            <label htmlFor=\"\" className=\"text-sm mb-1 font-bold text-gray-500\">Net Profit</label>\r\n                            <Price price={netProfit} priceColor={`${ netProfit < 0 ? \"text-red-500\" : \"text-green-500\" }`} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex flex-row\">\r\n                        <div className=\"flex flex-col items-center mr-4\">\r\n                            <label htmlFor=\"\" className=\"text-sm mb-1 text-gray-500\">Buys</label>\r\n                            <Price price={expenditure} />\r\n                        </div>\r\n                        <div className=\"flex flex-col items-center mr-4\">\r\n                            <label htmlFor=\"\" className=\"text-sm mb-1 text-gray-500\">Sells</label>\r\n                            <Price price={revenue} />\r\n                        </div>\r\n                        <div className=\"flex flex-col items-center\">\r\n                            <label htmlFor=\"\" className=\"text-sm mb-1 text-gray-500\">Fees</label>\r\n                            <Price price={totalFees} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"w-2/8\">\r\n                    <div className=\"flex flex-col xl:flex-row justify-evenly w-full h-full\">\r\n                        <div className=\"flex flex-row xl:flex-col items-center xl:mr-4\">\r\n                            <label htmlFor=\"\" className=\"text-sm mr-4 xl:mr-0 xl:mb-1 font-bold text-gray-500\">Relative Appeal</label>\r\n                            <span className=\"text-gray-200\">{item.AppealValue}</span>\r\n                        </div>\r\n                        <div className=\"flex flex-row xl:flex-col items-center xl:mr-4\">\r\n                            <label htmlFor=\"\" className=\"text-sm mr-4 xl:mr-0 xl:mb-1 text-gray-500\">Margin</label>\r\n                            <span className={item.Margin < 15 ? \"text-red-500\" : \"text-green-500\"}>{item.Margin}%</span>\r\n                        </div>\r\n                        <div className=\"flex flex-row xl:flex-col items-center xl:mr-4\">\r\n                            <label htmlFor=\"\" className=\"text-sm mr-4 xl:mr-0 xl:mb-1 text-gray-500\">Transaction Rate</label>\r\n                            <span className=\"text-gray-200\">{item.TransactionRate}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        /*\r\n        return (\r\n            <tr className=\"bg-gray-700\">\r\n                <td className=\"\">\r\n                    <div className=\"flex flex-row items-center\">\r\n                        <img src={item.Icon} alt={item.Name} className=\"mr-4 w-12 h-12\"/>\r\n                        <span className=\"italic\">{item.Name}</span>\r\n                    </div>\r\n                </td>\r\n                <td className=\"\">\r\n                    <div className=\"flex justify-center\">\r\n                        <Price price={item.BuyPrice} />\r\n                    </div>\r\n                </td>\r\n                <td className=\"\">\r\n                    <div className=\"flex justify-center\">\r\n                        <Price price={item.SellPrice} />\r\n                    </div>\r\n                </td>\r\n                <td className=\"\">\r\n                    <div className=\"flex justify-center\">\r\n                        <Price price={item.Fee} />\r\n                    </div>\r\n                </td>\r\n                <td className=\"\">\r\n                    <div className=\"text-center\">\r\n                        {item.AppealValue}\r\n                    </div>\r\n                </td>\r\n                <td className=\"\">\r\n                    <div className=\"text-center\">\r\n                        {item.Margin}\r\n                    </div>\r\n                </td>\r\n                <td className=\"\">\r\n                    <div className=\"text-center\">\r\n                        {item.TransactionRate}\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        );\r\n        */\r\n    }\r\n}","import { ItemField, ItemFieldSort } from \"../utils/ItemField\";\r\nimport { ItemRarity } from \"../utils/ItemRarity\";\r\nimport { ItemType } from \"../utils/ItemType\";\r\n\r\nexport class ItemQuery {\r\n    public name: string;\r\n    public type: ItemType;\r\n    public rarity: ItemRarity;\r\n    public minLevel: number;\r\n    public maxLevel: number;\r\n    public minBuyPrice: number;\r\n    public maxBuyPrice: number;\r\n    public minSellPrice: number;\r\n    public maxSellPrice: number;\r\n    public sortBy: ItemField;\r\n    public sortDirection: ItemFieldSort;\r\n\r\n    constructor(options?: ItemQueryOptions) {\r\n        this.name = options?.name ?? \"\";\r\n        this.type = options?.type ?? ItemType.All;\r\n        this.rarity = options?.rarity ?? ItemRarity.All;\r\n        this.minLevel = options?.minLevel ?? 0;\r\n        this.maxLevel = options?.maxLevel ?? 80;\r\n        this.minBuyPrice = options?.minBuyPrice ?? 0;\r\n        this.maxBuyPrice = options?.maxBuyPrice ?? 100000000;\r\n        this.minSellPrice = options?.minSellPrice ?? 0;\r\n        this.maxSellPrice = options?.maxSellPrice ?? 100000000;\r\n        this.sortBy = options?.sortBy ?? ItemField.Appeal;\r\n        this.sortDirection = options?.sortDirection ?? ItemFieldSort.Descending;\r\n    }\r\n\r\n    toObject(): { [key: string]: string } {\r\n        return {\r\n            name: this.name,\r\n            type: this.type.valueOf().toString(),\r\n            rarity: this.rarity.valueOf().toString(),\r\n            minLevel: this.minLevel.toString(),\r\n            maxLevel: this.maxLevel.toString(),\r\n            minBuyPrice: this.minBuyPrice.toString(),\r\n            maxBuyPrice: this.maxBuyPrice.toString(),\r\n            minSellPrice: this.minSellPrice.toString(),\r\n            maxSellPrice: this.maxSellPrice.toString(),\r\n            sortBy: this.sortBy.valueOf().toString(),\r\n            sortDirection: this.sortDirection.valueOf().toString()\r\n        };\r\n    }\r\n}\r\n\r\nexport interface ItemQueryOptions {\r\n    name?: string;\r\n    type?: ItemType;\r\n    rarity?: ItemRarity;\r\n    minLevel?: number;\r\n    maxLevel?: number;\r\n    minBuyPrice?: number;\r\n    maxBuyPrice?: number;\r\n    minSellPrice?: number;\r\n    maxSellPrice?: number;\r\n    sortBy?: ItemField;\r\n    sortDirection?: ItemFieldSort;\r\n}","import { ItemQuery } from \"../dataContracts/ItemQuery\";\r\nimport { PricedItem } from \"../dataContracts/PricedItem\";\r\nimport { ItemField, ItemFieldSort } from \"../utils/ItemField\";\r\nimport IApiService from \"./IApiService\";\r\n\r\nclass DummyApiService implements IApiService {\r\n    static readonly formatter = new Intl.NumberFormat(\"en-US\", {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n    });\r\n\r\n    async GetItem(query: ItemQuery): Promise<PricedItem | null> {\r\n        const minBuy = 1600;\r\n        const maxBuy = 2000;\r\n        const minSell = 2000;\r\n        const maxSell = 2400;\r\n        const randomBuy = Math.round(Math.random() * (maxBuy - minBuy + 1)) + minBuy;\r\n        const randomSell = Math.round(Math.random() * (maxSell - minSell + 1)) + minSell;\r\n\r\n        const minRate = 0;\r\n        const maxRate = 1000;\r\n        const randomTransactRate = Math.round(Math.random() * (maxRate - minRate + 1)) + minRate;\r\n        const margin = (randomSell - randomBuy) / randomSell * 100;\r\n\r\n        const minIndex = 0;\r\n        const maxIndex = 100;\r\n        const randomIndex = Math.round(Math.random() * (maxIndex - minIndex + 1)) + minIndex;\r\n\r\n        const item: PricedItem = {\r\n            Id: 19721, \r\n            Name: `Glob of Ectoplasm ${randomIndex}`, \r\n            Icon: \"https://render.guildwars2.com/file/18CE5D78317265000CF3C23ED76AB3CEE86BA60E/65941.png\", \r\n            BuyPrice: randomBuy, \r\n            SellPrice: randomSell, \r\n            Fee: Math.ceil(randomSell * 0.15), \r\n            AppealValue: 0, \r\n            Margin: parseFloat(DummyApiService.formatter.format(margin)), \r\n            TransactionRate: randomTransactRate\r\n        };\r\n\r\n        return item;\r\n    }\r\n\r\n    GetItemWithId(id: number): Promise<PricedItem | null> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    async GetItems(query: ItemQuery, pageNumber: number): Promise<PricedItem[] | null> {\r\n        const items: PricedItem[] = [];\r\n        let lowestMargin = Number.POSITIVE_INFINITY;\r\n        let highestMargin = 0;\r\n        let lowestRate = Number.POSITIVE_INFINITY;\r\n        let highestRate = 0;\r\n\r\n        for (var i = 0; i < 10; i++) {\r\n            var item = await this.GetItem(query);\r\n            if (item == null)\r\n                break;\r\n\r\n            if (item.TransactionRate < lowestRate)\r\n                lowestRate = item.TransactionRate;\r\n            if (item.TransactionRate > highestRate)\r\n                highestRate = item.TransactionRate;\r\n\r\n            if (item.Margin < lowestMargin)\r\n                lowestMargin = item.Margin;\r\n            if (item.Margin > highestMargin)\r\n                highestMargin = item.Margin;\r\n\r\n            items.push(item);\r\n        }\r\n\r\n        items.forEach(item => {\r\n            const margin = (item.Margin - lowestMargin) / (highestMargin - lowestMargin) * (item.Margin < 15 ? 0 : 1) * 5;\r\n            const rate = (item.TransactionRate - lowestRate) / (highestRate - lowestRate) * (item.Margin < 15 ? 0 : 1) * 5;\r\n            item.AppealValue = parseFloat(DummyApiService.formatter.format(margin + rate));\r\n        });\r\n\r\n        return items.sort((a, b) => DummyApiService.compareFunc(a, b, query.sortBy, query.sortDirection));\r\n    }\r\n\r\n    GetItemsWithIds(ids: number[], pageNumber: number): Promise<PricedItem[] | null> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    private static compareFunc(a: PricedItem, b: PricedItem, sortBy: ItemField, sortDirection: ItemFieldSort): number {\r\n        if (sortBy === ItemField.Appeal) {\r\n            if (sortDirection === ItemFieldSort.Ascending)\r\n                return a.AppealValue - b.AppealValue;\r\n            \r\n            return b.AppealValue - a.AppealValue;\r\n        }\r\n\r\n        if (sortBy === ItemField.Margin) {\r\n            if (sortDirection === ItemFieldSort.Ascending)\r\n                return a.Margin - b.Margin;\r\n\r\n            return b.Margin - a.Margin;\r\n        }\r\n\r\n        if (sortBy === ItemField.TradeRate) {\r\n            if (sortDirection === ItemFieldSort.Ascending)\r\n                return a.TransactionRate - b.TransactionRate;\r\n\r\n            return b.TransactionRate - a.TransactionRate;\r\n        }\r\n\r\n        if (sortBy === ItemField.Buys) {\r\n            if (sortDirection === ItemFieldSort.Ascending)\r\n                return a.BuyPrice - b.BuyPrice;\r\n\r\n            return b.BuyPrice - a.BuyPrice;\r\n        }\r\n\r\n        if (sortBy === ItemField.Sells) {\r\n            if (sortDirection === ItemFieldSort.Ascending)\r\n                return a.SellPrice - b.SellPrice;\r\n\r\n            return b.SellPrice - a.SellPrice;\r\n        }\r\n\r\n        if (sortBy === ItemField.Name) {\r\n            if (sortDirection === ItemFieldSort.Ascending)\r\n                return a.Name.localeCompare(b.Name);\r\n\r\n            return b.Name.localeCompare(a.Name);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport default new DummyApiService();","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { ItemQuery, ItemQueryOptions } from \"../dataContracts/ItemQuery\";\r\nimport { PricedItem } from \"../dataContracts/PricedItem\";\r\nimport DummyApiService from \"../services/DummyApiService\";\r\nimport { ItemField, ItemFieldSort } from \"../utils/ItemField\";\r\n\r\nexport type SortingBarProps = {\r\n    name: string;\r\n    children?: (sortedItems: PricedItem[]) => React.ReactNode | null;\r\n}\r\n\r\nexport type SortingBarState = {\r\n    items: PricedItem[];\r\n    sortBy: ItemField;\r\n    sortDirection: ItemFieldSort;\r\n    searchStr: string;\r\n}\r\n\r\nexport default class SortingBar extends React.Component<SortingBarProps, SortingBarState> {\r\n    constructor(props: SortingBarProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            sortBy: ItemField.Appeal,\r\n            sortDirection: ItemFieldSort.Descending,\r\n            searchStr: \"\"\r\n        };\r\n\r\n        this.onSearch = this.onSearch.bind(this);\r\n        this.onSort = this.onSort.bind(this);\r\n        this.onSortDirection = this.onSortDirection.bind(this);\r\n        this.getItems = this.getItems.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        var items = await this.getItems();\r\n        if (items == null)\r\n            return;\r\n\r\n        this.setState({items});\r\n    }\r\n\r\n    private async onSearch(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        const { searchStr } = this.state;\r\n\r\n        const items = await this.getItems({name: searchStr});\r\n        if (items == null)\r\n            return;\r\n\r\n        this.setState({items});\r\n    }\r\n\r\n    private async onSort(event: React.ChangeEvent<HTMLSelectElement>) {\r\n        console.log(event.target.value);\r\n        console.log(event.target.value as keyof typeof ItemField);\r\n        const value: ItemField = parseInt(event.target.value) as ItemField;\r\n\r\n        const items = await this.getItems({sortBy: value});\r\n        if (items == null)\r\n            return;\r\n\r\n        this.setState({sortBy: value, items: items});\r\n    }\r\n\r\n    private async onSortDirection() {\r\n        const { sortDirection } = this.state;\r\n        const newDirection: ItemFieldSort = sortDirection === ItemFieldSort.Ascending ? ItemFieldSort.Descending : ItemFieldSort.Ascending;\r\n\r\n        const items = await this.getItems({sortDirection: newDirection});\r\n        if (items == null)\r\n            return;\r\n\r\n        this.setState({sortDirection: newDirection, items: items});\r\n    }\r\n\r\n    private async getItems(options?: ItemQueryOptions): Promise<PricedItem[] | null> {\r\n        const { searchStr, sortBy, sortDirection } = this.state;\r\n\r\n        const optionValues: ItemQueryOptions = {\r\n            name: options?.name ?? searchStr,\r\n            sortBy: options?.sortBy ?? sortBy,\r\n            sortDirection: options?.sortDirection ?? sortDirection\r\n        };\r\n\r\n        return await DummyApiService.GetItems(new ItemQuery(optionValues), 1);\r\n    }\r\n\r\n    render() {\r\n        const { name, children } = this.props;\r\n        const { items, sortBy, sortDirection, searchStr } = this.state;\r\n\r\n        const isSortAscending: boolean = sortDirection === ItemFieldSort.Ascending;\r\n\r\n        return(\r\n            <>\r\n                <div className=\"flex flex-row justify-between items-center px-4 py-2 mb-4 bg-gray-900 text-gray-500\">\r\n                    <span className=\"\">{name}</span>\r\n                    \r\n                    <div className=\"flex items-center\">\r\n                        <form className=\"flex flex-row mr-4\"\r\n                            onSubmit={this.onSearch}>\r\n                            <input type=\"text\" className=\"pl-2 rounded-l bg-gray-600 text-gray-200\"\r\n                                value={searchStr}\r\n                                onChange={event => this.setState({searchStr: event.target.value})} />\r\n                            <button className=\"flex items-center px-2 rounded-r bg-gray-700 text-gray-300\">\r\n                                <FontAwesomeIcon icon=\"search\" className=\"mr-1 text-xs\" />\r\n                                <span className=\"text-xs\">Search</span>\r\n                            </button>\r\n                        </form>\r\n                        <label htmlFor=\"\" className=\"mr-2 text-sm\">Sort By</label>\r\n                        <select name=\"\" id=\"\" className=\"pl-2 rounded-l h-6 text-sm bg-gray-700 text-gray-300\" \r\n                            value={sortBy} \r\n                            onChange={this.onSort}>\r\n                            <option value={ItemField.Name} className=\"\">{ItemField[ItemField.Name]}</option>\r\n                            <option value={ItemField.Buys} className=\"\">{ItemField[ItemField.Buys]}</option>\r\n                            <option value={ItemField.Sells} className=\"\">{ItemField[ItemField.Sells]}</option>\r\n                            <option value={ItemField.Appeal} className=\"\">{ItemField[ItemField.Appeal]}</option>\r\n                            <option value={ItemField.Margin} className=\"\">{ItemField[ItemField.Margin]}</option>\r\n                            <option value={ItemField.TradeRate} className=\"\">{ItemField[ItemField.TradeRate]}</option>\r\n                        </select>\r\n                        <button className=\"px-2 mr-4 rounded-r border-l border-gray-800 bg-gray-700 text-gray-300\"\r\n                            onClick={this.onSortDirection}>\r\n                            {(isSortAscending && sortBy !== ItemField.Name &&\r\n                                <FontAwesomeIcon icon=\"sort-numeric-up\" />\r\n                            ) ||\r\n                            (!isSortAscending && sortBy !== ItemField.Name &&\r\n                                <FontAwesomeIcon icon=\"sort-numeric-down-alt\" />\r\n                            ) ||\r\n                            (isSortAscending && sortBy === ItemField.Name &&\r\n                                <FontAwesomeIcon icon=\"sort-alpha-up\" />\r\n                            ) ||\r\n                            (!isSortAscending && sortBy === ItemField.Name &&\r\n                                <FontAwesomeIcon icon=\"sort-alpha-down-alt\" />\r\n                            )}\r\n                        </button>\r\n                        <button className=\"flex items-center rounded bg-gray-700 text-gray-300\" style={{padding: \"0.20rem 0.5rem\"}}>\r\n                            <FontAwesomeIcon icon=\"filter\" className=\"mr-1 text-xs\" />\r\n                            <span className=\"text-xs\">Filter</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                {children != null ? children(items): null}\r\n            </>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Scrollbar from \"react-scrollbars-custom\";\r\nimport ItemComparisonSlot from \"../components/ItemComparisonSlot\";\r\nimport SortingBar from \"../components/SortingBar\";\r\n\r\nexport type MyListProps = {\r\n\r\n}\r\n\r\nexport type MyListState = {\r\n    \r\n}\r\n\r\nexport default class MyList extends React.Component<MyListProps, MyListState> {\r\n    render() {\r\n        return (\r\n            <div className=\"main xl:w-3/4 w-full px-4 py-4 bg-gray-800\" style={{height: \"calc(100vh - 4rem)\"}}>\r\n                <SortingBar name=\"Tracked Items\">\r\n                    {sortedItems => (\r\n                        <Scrollbar noScrollX style={{height: \"calc(100vh - 11rem)\"}}>\r\n                            {sortedItems.map((value, index) => (\r\n                                <div key={index} className=\"mb-2\">\r\n                                    <ItemComparisonSlot item={value} />\r\n                                </div>\r\n                            ))}\r\n                        </Scrollbar>\r\n                    )}\r\n                </SortingBar>\r\n                \r\n                {/*\r\n                <ItemComparisonSlot item={{ Id: 19721, Name: \"Glob of Ectoplasm\", Icon: \"https://render.guildwars2.com/file/18CE5D78317265000CF3C23ED76AB3CEE86BA60E/65941.png\", BuyPrice: 2022, SellPrice: 2232, Fee: Math.ceil(2232 * 0.15), AppealValue: 0, Margin: 0, TransactionRate: 0 }} />\r\n                <div className=\"block\">\r\n                    <div id=\"head\" className=\"\">\r\n                        <div className=\"flex flex-row flex-wrap\">\r\n                            <div className=\"font-bold\">Name</div>\r\n                            <div className=\"font-bold\">Buys</div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"body\" className=\"\">\r\n\r\n                    </div>\r\n                </div>\r\n                */}\r\n\r\n                {/*\r\n                <table className=\"table-fixed w-full\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className=\"w-2/8\">Name</th>\r\n                            <th className=\"w-1/8\">Buys</th>\r\n                            <th className=\"w-1/8\">Sells</th>\r\n                            <th className=\"w-1/8\">Fee</th>\r\n                            <th className=\"w-1/8\">Appeal</th>\r\n                            <th className=\"w-1/8\">Margin</th>\r\n                            <th className=\"w-1/8\">Transaction Rate</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <ItemComparisonSlot item={{ Id: 19721, Name: \"Glob of Ectoplasm\", Icon: \"https://render.guildwars2.com/file/18CE5D78317265000CF3C23ED76AB3CEE86BA60E/65941.png\", BuyPrice: 2022, SellPrice: 2232, Fee: Math.ceil(2232 * 0.15), AppealValue: 0, Margin: 0, TransactionRate: 0 }} />\r\n                    </tbody>\r\n                </table>\r\n                */}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default class Dashboard extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"xl:w-3/4 w-full bg-gray-800 text-gray-200\"></div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { PricedItem } from \"../dataContracts/PricedItem\";\r\nimport Price from \"./Price\";\r\n\r\nexport type ItemSummarySlotProps = {\r\n    item: PricedItem;\r\n}\r\n\r\nexport type ItemSummarySlotState = {\r\n\r\n}\r\n\r\nexport default class ItemSummarySlot extends React.Component<ItemSummarySlotProps, ItemSummarySlotState> {\r\n    constructor(props: ItemSummarySlotProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { item } = this.props;\r\n\r\n        return(\r\n            <div className=\"flex flex-row px-4 py-2 bg-gray-700\">\r\n                <div className=\"flex flex-row w-2/8 items-center mr-6\">\r\n                    <img src={item.Icon} alt={item.Name} className=\"mr-4 w-12 h-12\"/>\r\n                    <span className=\"italic text-gray-200\">{item.Name}</span>\r\n                </div>\r\n                <div className=\"flex flex-row w-6/8 items-center justify-between text-gray-200\">\r\n                    <div className=\"flex flex-col items-center\">\r\n                        <label htmlFor=\"\" className=\"text-sm mb-1 font-bold text-gray-500\">Buys</label>\r\n                        <Price price={item.BuyPrice} />\r\n                    </div>\r\n                    <div className=\"flex flex-col items-center\">\r\n                        <label htmlFor=\"\" className=\"text-sm mb-1 font-bold text-gray-500\">Sells</label>\r\n                        <Price price={item.SellPrice} />\r\n                    </div>\r\n                    <div className=\"flex flex-col items-center\">\r\n                        <label htmlFor=\"\" className=\"text-sm mb-1 font-bold text-gray-500\">Margin</label>\r\n                        <span className={`${item.Margin > 15 ? \"text-green-500\" : \"text-red-500\"}`}>{item.Margin}%</span>\r\n                    </div>\r\n                    <div className=\"flex flex-col items-center\">\r\n                        <label htmlFor=\"\" className=\"text-sm mb-1 font-bold text-gray-500\">Trade Rate</label>\r\n                        <span className=\"\">{item.TransactionRate}</span>\r\n                    </div>\r\n                    <div className=\"flex flex-col items-center\">\r\n                        <label htmlFor=\"\" className=\"text-sm mb-1 font-bold text-gray-500\">Appeal Score</label>\r\n                        <span className=\"\">{item.AppealValue}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Scrollbar from \"react-scrollbars-custom\";\r\nimport ItemSummarySlot from \"../components/ItemSummarySlot\";\r\nimport SortingBar from \"../components/SortingBar\";\r\n\r\nexport type GeneralSearchProps = {\r\n\r\n}\r\n\r\nexport type GeneralSearchState = {\r\n    \r\n}\r\n\r\nexport default class GeneralSearch extends React.Component<GeneralSearchProps, GeneralSearchState> {\r\n    render() {\r\n        return(\r\n            <div className=\"main xl:w-3/4 w-full px-4 py-4 bg-gray-800 text-gray-200\" style={{height: \"calc(100vh - 4rem)\"}}>\r\n                <SortingBar name=\"Results\">\r\n                    {sortedItems => (\r\n                        <Scrollbar noScrollX style={{height: \"calc(100vh - 11rem)\"}}>\r\n                            {sortedItems.map((value, index) => (\r\n                                <div key={index} className=\"mb-2\">\r\n                                    <ItemSummarySlot item={value} />\r\n                                </div>\r\n                            ))}\r\n                        </Scrollbar>\r\n                    )}\r\n                </SortingBar>\r\n            </div>\r\n        );\r\n    }\r\n}","const environment = {\r\n    urls: {\r\n        authority: \"https://auth.devwulfcodes.com\",\r\n        host: \"https://gw2.devwulfcodes.com\",\r\n        gw2calculator: \"https://gw2.devwulfcodes.com/api\"\r\n    }\r\n};\r\n\r\nexport default environment;","import environment from \"./environment\";\r\n\r\nconst configuration = {\r\n    client_id: \"gw2_calculator_app\",\r\n    response_type: \"id_token token\",\r\n    scope: \"openid email roles profile gw2calculator\",\r\n    automaticSilentRenew: false,\r\n    loadUserInfo: true,\r\n    authority: environment.urls.authority,\r\n    redirect_uri: `${environment.urls.host}/authentication/callback`,\r\n    post_logout_redirect_uri: `${environment.urls.host}/`,\r\n    silent_redirect_uri: `${environment.urls.host}/authentication/silent_callback`\r\n};\r\n\r\nexport default configuration;","import { AuthenticationContext } from \"@axa-fr/react-oidc-context\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Header extends React.Component {\r\n    render() {\r\n        return(\r\n            <header className=\"\" style={{boxShadow: \"0 10px 15px -3px rgba(0, 0, 0, 0.2)\", zIndex: 100}}>\r\n                <AuthenticationContext.Consumer>\r\n                    {props => {\r\n                        return(\r\n                            <div className=\"flex justify-between items-center px-4 bg-indigo-700 text-indigo-200\">\r\n                                <div className=\"flex flex-row items-center\">\r\n                                    <Link className=\"transition duration-150 ease-in-out mr-6 text-lg font-bold hover:text-indigo-100\"\r\n                                        to=\"/\">\r\n                                        GW2 Calculator\r\n                                    </Link>\r\n                                    <Link className=\"transition duration-150 ease-in-out mr-3 py-5 px-2 hover:bg-indigo-600 hover:text-indigo-100\"\r\n                                        to=\"/\">\r\n                                        Dashboard\r\n                                    </Link>\r\n                                    <Link className=\"transition duration-150 ease-in-out mr-3 py-5 px-2 hover:bg-indigo-600 hover:text-indigo-100\"\r\n                                        to=\"/search\">\r\n                                        Search\r\n                                    </Link>\r\n                                    <Link className=\"transition duration-150 ease-in-out mr-3 py-5 px-2 hover:bg-indigo-600 hover:text-indigo-100\"\r\n                                        to=\"/list\">\r\n                                        My List\r\n                                    </Link>\r\n                                </div>\r\n\r\n                                {props.oidcUser && (\r\n                                    <div className=\"\">\r\n                                        <span className=\"mr-4\">Hello, {props.oidcUser.profile.name}!</span>\r\n                                        <button className=\"transition duration-150 ease-in-out px-4 py-1 bg-indigo-800 hover:shadow-lg hover:bg-indigo-900 hover:text-indigo-100\"\r\n                                            onClick={() => props.logout()}>\r\n                                            Logout\r\n                                        </button>\r\n                                    </div>\r\n                                ) ||\r\n                                (!props.oidcUser && (\r\n                                    <div className=\"\">\r\n                                        <button className=\"transition duration-150 ease-in-out px-4 py-1 bg-indigo-800 hover:shadow-lg hover:bg-indigo-900 hover:text-indigo-100\"\r\n                                            onClick={() => props.login()}>\r\n                                            Login\r\n                                        </button>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </AuthenticationContext.Consumer>\r\n            </header>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport \"./assets/main.css\";\r\nimport MyList from \"./pages/MyList\";\r\nimport Dashboard from \"./pages/Dashboard\";\r\nimport GeneralSearch from \"./pages/GeneralSearch\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { AuthenticationProvider, withOidcSecure } from \"@axa-fr/react-oidc-context\";\r\nimport configuration from \"./open-id-config\";\r\n\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Header from \"./components/Header\";\r\nimport { config } from \"process\";\r\n\r\nlibrary.add(fas);\r\n\r\nfunction App() {\r\n    const afterLogin = () => (\r\n        <div className=\"flex justify-center items-center w-screen h-screen bg-gray-700 text-gray-100\">\r\n            <div className=\"flex flex-row items-center\">\r\n                <img src={logo} alt=\"logo\" className=\"App-logo w-12\" />\r\n                <span className=\"\">Logging in...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const afterLogout = () => (\r\n        <div className=\"flex justify-center items-center w-screen h-screen bg-gray-700 text-gray-100\">\r\n            <div className=\"flex flex-row items-center\">\r\n                <img src={logo} alt=\"logo\" className=\"App-logo w-12\" />\r\n                <span className=\"\">Logging out...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return(\r\n        <div className=\"flex flex-col\">\r\n            <BrowserRouter>\r\n                <AuthenticationProvider configuration={configuration}\r\n                    callbackComponentOverride={afterLogin}\r\n                    authenticating={afterLogout}>\r\n                    <Header />\r\n                    <Redirect path=\"/authentication/callback\" to=\"/\" />\r\n                    <div className=\"flex flex-row\">\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={Dashboard} />\r\n                            <Route path=\"/search\" component={GeneralSearch} />\r\n                            <Route path=\"/list\" component={MyList} />\r\n                        </Switch>\r\n                        <div className=\"sidebar hidden xl:flex xl:w-1/4 bg-gray-900\" style={{height: \"calc(100vh - 4rem)\"}}>\r\n\r\n                        </div>\r\n                    </div>\r\n                </AuthenticationProvider>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}